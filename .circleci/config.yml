version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
      event:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
            aws s3 rm s3://udapeople-<<parameters.workflowID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>
  install_awscli:
    description: install aws cli v2
    steps:
      - run:
          name: install aws cli v2
          command: |

            curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: install ansible
    steps:
      - run:
          name: install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
             sudo apt-add-repository ppa:ansible/ansible
             sudo apt install ansible -y
  install_nodejs:
    description: install node.js v13
    steps:
      - run:
          name: install node.js v13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowID:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |

            SUCCESS=$(curl --insecure  https://kvdb.io/GUUirg67qDbRk9Qa1uyN21/migration_<< parameters.workflowID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Unit Test
          command: |
            cd frontend
            npm install
            npm test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Unit Test
          command: |
            cd backend
            npm install
            npm  test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt

            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      # Here's where you will add some code to rollback on failure.

      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  configure-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["01:18:0d:0e:b6:44:bc:7a:21:5d:32:fb:82:92:75:e2"]

      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/N9XNJ6UAPJzcwfnL2WhoDz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys:
            - frontend-build
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: cimg/base:stable

    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["01:18:0d:0e:b6:44:bc:7a:21:5d:32:fb:82:92:75:e2"]

      - attach_workspace:
          at: ~/

      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Build backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd .. 
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files

      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations*ts
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs

      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030" 
               echo "${API_URL}"  
               if curl -s $API_URL/api/status | grep "ok"    
               then        
                  exit 0        
               else         
                  exit 1      
               fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo $URL 
            if curl -s ${URL} | grep "Welcome" 
            then      
              exit 0   
            else    
              exit 1    
            fi

      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs

      - run:
          name: Save old WorkflowID
          command: |
            export OldWorkflowID=$(aws cloudformation  \
               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
               --no-paginate --output text)
             echo $OldWorkflowID >> ~/OldWorkflowID.txt
             cat ~/OldWorkflowID.txt
             curl  https://kvdb.io/GUUirg67qDbRk9Qa1uyN21/old_workflow_id  -d $OldWorkflowID
      - run:
          name: update cloudfront
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack \

      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Remove old stacks and files from cloudformation
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                        --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stacks: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure  https://kvdb.io//GUUirg67qDbRk9Qa1uyN21/old_workflow_id)
            echo OldWorkflowID: ${OldWorkflowID}
            if [[ "${STACKS[@]}"  =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
